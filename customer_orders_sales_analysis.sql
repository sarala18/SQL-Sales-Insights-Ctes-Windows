-- Create a new database to store all project tables
CREATE DATABASE sql_project;
USE sql_project;

-- Create the customers table
-- This table stores customer details like ID, name, email, city, and signup date
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,                  
    customer_name VARCHAR(100),                   
    city VARCHAR(50),                             
	signup_date Date 							
);

-- Create the orders table
-- This table stores each order placed by a customer
CREATE TABLE orders (
    order_id INT PRIMARY KEY,                     
    customer_id INT,                              
    order_date DATE,                              
    status VARCHAR(50),                           
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) 
);

-- Create the order_items table
-- This table stores the individual items purchased in each order
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,                
    order_id INT,                                 
    product_name VARCHAR(100),                    
    quantity INT,                                 
    price DECIMAL(10, 2),                         
    FOREIGN KEY (order_id) REFERENCES orders(order_id) 
);

SELECT * FROM customers LIMIT 5;
SELECT * FROM orders LIMIT 5;
SELECT * FROM order_items LIMIT 5;
-- Retrive the data 
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM order_items;

-- Query 1: List all customers who placed an order in 2024

SELECT DISTINCT c.customer_id, c.customer_name, c.city
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE YEAR(o.order_date) = 2024;

-- Query 2: Total revenue generated by each customer
-- This query calculates total purchase amount per customer by joining customers and orders

SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_revenue DESC;

-- Query 3: Total revenue with spending rank of each customer
-- Use a window function to rank customers based on their total revenue
SELECT customer_id, customer_name, total_revenue,
       RANK() OVER (ORDER BY total_revenue DESC) AS spending_rank
FROM (
    SELECT c.customer_id, c.customer_name,
           SUM(oi.quantity * oi.price_per_unit) AS total_revenue
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY c.customer_id, c.customer_name
) AS customer_spending;


-- Query 4: Monthly Revenue Trend for 2024 Using CTE

-- Use CTE to calculate revenue for each month in 2024
WITH monthly_revenue AS (
    SELECT MONTH(o.order_date) AS month,
           SUM(oi.quantity * oi.price_per_unit) AS total_revenue
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    WHERE YEAR(o.order_date) = 2024
    GROUP BY MONTH(o.order_date)
)
SELECT * FROM monthly_revenue
ORDER BY month;

-- Query 5: Top 5 Most Sold Products by Quantity in 2024

-- Find the top 5 products with highest quantity sold in 2024
SELECT oi.product_name,
       SUM(oi.quantity) AS total_quantity_sold
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
WHERE YEAR(o.order_date) = 2024
GROUP BY oi.product_name
ORDER BY total_quantity_sold DESC
LIMIT 5;

-- Query 6: Average Order Value by City Using Window Function

SELECT c.city, o.order_id,o.total_amount,
ROUND(AVG(o.total_amount) OVER (PARTITION BY c.city), 2) AS avg_order_value_in_city
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
ORDER BY c.city, o.order_id;

-- Query 7 Identify the top 3 highest spending customers in each city
WITH customer_spending AS (
    SELECT c.customer_id, c.customer_name, c.city,
        SUM(o.total_amount) AS total_spent
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id, c.customer_name, c.city
),
ranked_customers AS (
    SELECT *,
        RANK() OVER (PARTITION BY city ORDER BY total_spent DESC) AS spending_rank
    FROM customer_spending
)
SELECT *
FROM ranked_customers
WHERE spending_rank <= 3
ORDER BY city, spending_rank;

-- query-8 Calculate the average quantity sold per product across all orders
SELECT product_name, category,order_id, quantity,
    AVG(quantity) OVER (PARTITION BY product_name) AS avg_quantity_sold
FROM order_items
ORDER BY product_name, order_id;
-- Use a CTE to calculate total revenue per customer
WITH customer_revenue AS (
    SELECT c.customer_id, c.city, SUM(o.total_amount) AS total_revenue
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id, c.city
)
-- Now aggregate city-wise revenue from customer-level revenue
SELECT city, SUM(total_revenue) AS city_total_revenue
FROM customer_revenue
GROUP BY city
ORDER BY city_total_revenue DESC
LIMIT 1;

--  Query 10: List Products with Their Total Sales and Rank Them by Revenue (2024 Only)
-- Step 1: Use a CTE to calculate product-level revenue for 2024
WITH product_revenue AS (
    SELECT oi.product_name, SUM(oi.quantity * oi.price_per_unit) AS total_revenue
    FROM order_items oi
    JOIN orders o ON oi.order_id = o.order_id
    WHERE YEAR(o.order_date) = 2024
    GROUP BY oi.product_name
)
-- Step 2: Rank products based on revenue using window function
SELECT product_name, total_revenue,
    RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank
FROM product_revenue;



